{"version":3,"sources":["components/TypeSwitcher/TypeSwitcher.js","components/InputValues/InputValues.js","components/Charts/Charts.js","components/Description/Description.js","App.js","serviceWorker.js","index.js"],"names":["TypeSwitcher","props","className","value","onClick","changeCurrentView","currentView","InputValues","investmentValues","amount","onChange","changeAmount","placeholder","payment","changePayment","rate","changeRate","years","changeYears","debtValues","Fragment","Charts","data","currYear","Date","getFullYear","totalInterest","parseInt","parseFloat","split","join","contributions","total","push","Year","Total","Contributions","Interest","i","roundedTotal","Math","round","toFixed","prevTotal","principal","monthlyRate","Principal","investmentDescription","length","toLocaleString","debtDescription","margin","top","right","left","bottom","strokeDasharray","dataKey","content","active","payload","label","name","type","stackId","stroke","fill","Description","href","App","handleCurrentViewChange","e","target","setState","baseState","handleAmountChange","val","test","substr","handlePaymentChange","handleRateChange","decimalPlaces","includes","isNaN","handleYearsChange","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e81a3947.chunk.js","sourcesContent":["import React from 'react';\nimport './TypeSwitcher.css';\n\nfunction TypeSwitcher(props) {\n\treturn (\n\t\t<div className='typeswitcher-container'>\n\t\t\t<button value='investment' onClick={props.changeCurrentView} className={props.currentView === 'investment' ? 'typeswitcher-button-pressed' : {} }>INVESTMENT</button>\n\t\t\t<button value='debt' onClick={props.changeCurrentView} className={props.currentView === 'debt' ? 'typeswitcher-button-pressed' : {} }>LOAN</button>\n\t\t</div>\n\t);\n}\n\nexport default TypeSwitcher;\n","import React from 'react'\nimport './InputValues.css'\n\nfunction InputValues(props) {\n\n\tlet investmentValues = (\n\t\t<div className='inputvalues-container'>\n\t\t\t<div className='inputvalues-item'>\n\t\t\t\t<h1>Starting<br></br>Amount:</h1>\n\t\t\t\t<span className=\"inputvalues-input\">$ <input value={props.amount} onChange={props.changeAmount} placeholder='Required'/></span>\n\t\t\t</div>\n\t\t\t<div className='inputvalues-item'>\n\t\t\t\t<h1>Monthly<br></br>Contributions:</h1>\n\t\t\t\t<span className=\"inputvalues-input\">$ <input value={props.payment} onChange={props.changePayment} placeholder='Required'/></span>\n\t\t\t</div>\n\t\t\t<div className='inputvalues-item'>\n\t\t\t\t<h1>Annual Rate<br></br>of Return:</h1>\n\t\t\t\t<span className=\"inputvalues-input\"><input value={props.rate} onChange={props.changeRate} placeholder='Required'/>%</span>\n\t\t\t</div>\n\t\t\t<div className='inputvalues-item'>\n\t\t\t\t<h1>Years to<br></br>Grow:</h1>\n\t\t\t\t<span className=\"inputvalues-input\"><input value={props.years} onChange={props.changeYears} placeholder='Required'/></span>\n\t\t\t</div>\n\t\t</div>\n\t)\n\n\tlet debtValues = (\n\t\t<div className='inputvalues-container'>\n\t\t\t<div className='inputvalues-item'>\n\t\t\t\t<h1>Debt<br></br>Amount:</h1>\n\t\t\t\t<span className=\"inputvalues-input\">$ <input value={props.amount} onChange={props.changeAmount} placeholder='Required'/></span>\n\t\t\t</div>\n\t\t\t<div className='inputvalues-item'>\n\t\t\t\t<h1>Monthly<br></br>Payment:</h1>\n\t\t\t\t<span className=\"inputvalues-input\">$ <input value={props.payment} onChange={props.changePayment} placeholder='Required'/></span>\n\t\t\t</div>\n\t\t\t<div className='inputvalues-item'>\n\t\t\t\t<h1>Annual Interest<br></br>Rate:</h1>\n\t\t\t\t<span className=\"inputvalues-input\"><input value={props.rate} onChange={props.changeRate} placeholder='Required'/>%</span>\n\t\t\t</div>\n\t\t</div>\n\t)\n\n\treturn <React.Fragment>{props.currentView === 'investment' ? investmentValues : debtValues}</React.Fragment>\n}\n\nexport default InputValues;\n","import React from 'react'\nimport {BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer} from 'recharts'\nimport './Charts.css'\n\nfunction Charts(props) {\n\n\t/* Set parameter defaults for when no value is inputted. */\n\tlet data = []\n\tlet currYear = (new Date()).getFullYear()\n\tlet totalInterest = 0\n\tlet years = 0\n\tif(props.years !== ''){\n\t\tyears = parseInt(props.years)\n\t}\n\tlet rate = 0\n\tif(props.rate !== ''){\n\t\trate = parseFloat(props.rate)/100\n\t}\n\tlet payment = 0\n\tif(props.payment !== ''){\n\t\tpayment = parseInt(props.payment.split(\",\").join(\"\"))\n\t}\n\tlet amount = 0\n\tif(props.amount !== ''){\n\t\tamount = parseInt(props.amount.split(\",\").join(\"\"))\n\t}\n\n\n\t/* Populate data if viewing investment chart. */\n\tif (props.currentView === 'investment'){\n\t\tlet contributions = amount\n\t\tlet total = amount\n\n\t\tdata.push({Year: currYear, Total: total, Contributions: contributions, Interest: total - contributions})\n\n\t\tfor(let i = 1; i <= years; i++){\n\t\t\t/* Loop over 12 months */\n\t\t\tfor(let i = 0; i < 12; i++){\n\t\t\t\ttotal = total * (1+rate/12) + payment\n\t\t\t\tcontributions += payment\n\t\t\t}\n\t\t\tlet roundedTotal = Math.round(total).toFixed(0)\n\t\t\tdata.push({Year: currYear+i, Total: roundedTotal, Contributions: contributions, Interest: roundedTotal - contributions})\n\t\t}\n\t}\n\n\t/* Populate data if viewing debt chart. */\n\tif (props.currentView === 'debt'){\n\t\tlet total = amount\n\t\tlet prevTotal = amount\n\t\tlet principal = amount\n\t\tlet monthlyRate = rate/12\n\n\t\tdata.push({Year: currYear, Total: total, Principal: principal, Interest: total - principal})\n\n\t\t/* Run until debt is paid off, or only for ten years if debt is increasing with given parameters */\n\t\twhile(total < prevTotal || years <= 10) {\n\t\t\tif(total >= prevTotal && years === 10){\n\t\t\t\tyears = -1\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\t/* Loop over 12 months */\n\t\t\tprevTotal = total\n\t\t\tfor(let i = 0; i < 12 && total > 0; i++){\n\t\t\t\ttotalInterest += (total * (monthlyRate))\n\t\t\t\ttotal = total * (1+monthlyRate)\n\t\t\t\ttotal -= payment\n\t\t\t\tprincipal -= payment\n\t\t\t}\n\t\t\tcurrYear += 1\n\t\t\tyears += 1 /* This counter is used to say how many years it took to pay off debt in the description.*/\n\n\t\t\tlet roundedTotal = Math.round(total).toFixed(0)\n\n\t\t\t/* Check if the principal gets paid off on next iteration. */\n\t\t\tif(principal < 0){\n\t\t\t\t/* Check if the total balance is paid off on next iteration. */\n\t\t\t\tif(total > 0){\n\t\t\t\t\tdata.push({Year: currYear, Total: roundedTotal, Principal: 0, Interest: roundedTotal})\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdata.push({Year: currYear, Total: 0, Principal: 0, Interest: 0})\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdata.push({Year: currYear, Total: roundedTotal, Principal: principal, Interest: totalInterest})\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Customize the barcharts tooltip. */\n\tlet CustomTooltip = ({ active, payload, label }) => {\n\t  if (active) {\n\t    return (\n\t\t\t<div className=\"charts-custom-tooltip\">\n\t\t\t\t<p className=\"charts-label\">{`${label}`}</p>\n\t\t\t\t<p className=\"charts-label-total\">{`Total : $${parseInt(payload[0].value+payload[1].value).toLocaleString()}`}</p>\n\t\t\t\t<p className=\"charts-label-interest\">{`${payload[1].name} : $${parseInt(payload[1].value).toLocaleString()}`}</p>\n\t\t\t\t<p className=\"charts-label-contributions\">{`${payload[0].name} : $${parseInt(payload[0].value).toLocaleString()}`}</p>\n\t\t\t</div>\n\t    );\n\t  }\n\t  return null;\n\t};\n\t\n\t/* The description that will sumarize the chart. */\n\tlet investmentDescription = <p>Your investment will be worth <span className='charts-blue-text'>${parseInt(data[data.length-1].Total).toLocaleString()}</span> in {years} years.</p>\n\tlet debtDescription = /* A layered ternary expression to choose appropriate expression. */\n\t\tyears === -1 ? \n\t\t<p>Your loan will increase indefinitely. Increase your monthly payment.</p> : \n\t\tyears ===  1 ? \n\t\tparseInt(totalInterest) >= 0 ? \n\t\t<p>You will pay off your loan within 1 year, with <span className='charts-red-text'>${parseInt(totalInterest.toFixed(0)).toLocaleString()}</span> paid in interest.</p> :\n\t\t<p>You will pay off your loan within 1 year, with no interest paid.</p> : \n\t\tparseInt(totalInterest) >= 0 ? \n\t\t<p>You will pay off your loan in {years} years, with <span className='charts-red-text'>${parseInt(totalInterest.toFixed(0)).toLocaleString()}</span> paid in interest.</p> :\n\t\t<p>You will pay off your loan in {years} years, with no interest paid.</p>\n\n\n\treturn (\n\t\t<div className='charts-container'>\n\t\t\t{props.currentView === 'investment' ? investmentDescription : debtDescription}\n\t\t\t<ResponsiveContainer>\n\t\t\t\t<BarChart data={data} margin={{top: 10, right: 10, left: 10, bottom: 10,}}>\n\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t<XAxis dataKey=\"Year\" />\n\t\t\t\t\t<YAxis />\n\t\t\t\t\t<Tooltip content={<CustomTooltip />} />\n\t\t\t\t\t<Legend />\n\t\t\t\t\t<Bar type=\"monotone\"\n\t\t\t\t\t\t  dataKey={props.currentView === 'investment' ? 'Contributions' : 'Principal'}\n\t\t\t\t\t\t  stackId=\"1\"\n\t\t\t\t\t\t  stroke=\"#82ca9d\"\n\t\t\t\t\t\t  fill=\"#82ca9d\"\n\t\t\t\t\t\t  />\n\t\t\t\t\t<Bar type=\"monotone\"\n\t\t\t\t\t\t  dataKey=\"Interest\"\n\t\t\t\t\t\t  stackId=\"1\"\n\t\t\t\t\t\t  stroke=\"#ffc658\"\n\t\t\t\t\t\t  fill=\"#ffc658\"\n\t\t\t\t\t\t  />\n\t\t\t\t</BarChart>\n\t\t\t</ResponsiveContainer>\n  \t\t</div>\n\t);\n}\n\nexport default Charts;\n","import React from 'react'\nimport './Description.css'\n\nfunction Description(props) {\n\n\tlet investmentDescription = (\n\t\t<React.Fragment>\n\t\t\t<h2>Investment Calculator</h2>\n\t\t\t<p>See how your money will grow over time with compunded interest. <a href=\"https://www.getmoneystaybummy.com/investing\">Learn more</a>.</p>\n\t\t</React.Fragment>\n\t)\n\n\tlet debtDescription = (\n\t\t<React.Fragment>\n\t\t\t<h2>Loan Payoff Calculator</h2>\n\t\t\t<p>See how long it will take to pay off your loan, and how much in interest you will pay. <a href=\"https://www.getmoneystaybummy.com/debt\">Learn more</a>.</p>\n\t\t</React.Fragment>\n\t)\n\treturn (\n\t\t<div className='description-container'>\n\t\t\t{props.currentView === 'investment' ? investmentDescription : debtDescription}\n  \t\t</div>\n\t);\n}\n\nexport default Description;\n","import React from 'react'\n\nimport TypeSwitcher from './components/TypeSwitcher/TypeSwitcher'\nimport InputValues from './components/InputValues/InputValues'\nimport Charts from './components/Charts/Charts'\nimport Description from './components/Description/Description'\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentView: 'investment',\n\t\t\tamount: '1,000',\n\t\t\tpayment: '100',\n\t\t\trate: '8',\n\t\t\tyears: '20'\n\t\t}\n\t\tthis.baseState = this.state\n\t}\n\n\thandleCurrentViewChange = (e) => {\n\t\tif(e.target.value === 'investment') {\n\t\t\tthis.setState(this.baseState)\n\t\t}\n\t\telse if(e.target.value === 'debt') {\n\t\t\tthis.setState({\n\t\t\t\tcurrentView: 'debt',\n\t\t\t\tamount: '5,000',\n\t\t\t\tpayment: '100',\n\t\t\t\trate: '16',\n\t\t\t\tyears: '0'\n\t\t\t})\n\t\t}\n\t}\n\n\thandleAmountChange = (e) => {\n\t\t/* Dont allow spaces. Also remove the commas from the formated value. Since the state will be stored in\n\t\t   the comma formatted number so the input text field looks nice. */\n\t\tlet val = e.target.value.split(\",\").join(\"\").split(\" \").join(\"\")\n\t\tif(val !== ''){\n\t\t\tval = parseInt(val)\n\t\t}\n\t\tif (val === '' || (/^\\d+$/.test(val) && val <= 10000000) ) {\n\t\t\tif (/^0+\\d/.test(val)) {\n\t\t\t\tval = val.substr(1);\n\t\t\t}\n\t\t\tthis.setState({amount: val.toLocaleString()});\n\t\t}\n\t}\n\n\thandlePaymentChange = (e) => {\n\t\t/* Dont allow spaces. Also remove the commas from the formated value. Since the state will be stored in\n\t\t   the comma formatted number so the input text field looks nice. */\n\t\tlet val = e.target.value.split(\",\").join(\"\").split(\" \").join(\"\")\n\t\tif(val !== ''){\n\t\t\tval = parseInt(val)\n\t\t}\n\t\tif (val === '' || (/^\\d+$/.test(val) && val <= 1000000) ) {\n\t\t\tif (/^0+\\d/.test(val)) {\n\t\t\t\tval = val.substr(1);\n\t\t\t}\n\t\t\tthis.setState({payment: val.toLocaleString()});\n\t\t}\n\t}\n\n\thandleRateChange = (e) => {\n\t\tlet decimalPlaces = e.target.value.includes(\".\") ? e.target.value.split(\".\")[1].length : 0;\n\t\tif (e.target.value === '' || e.target.value === '.' || (!isNaN(e.target.value) && e.target.value <= 100 && decimalPlaces <= 2 )) {\n\t\t\t\n\t\t\tlet val = e.target.value;\n\t\t\tif (/^0+\\d/.test(e.target.value)) {\n\t\t\t\tval = val.substr(1);\n\t\t\t}\n\t\t\tif (/^\\./.test(e.target.value)) {\n\t\t\t\tval = '0.';\n\t\t\t}\n\t\t\tthis.setState({rate: val.split(\" \").join(\"\")});\n\t\t}\n\n\t}\n\n\thandleYearsChange = (e) => {\n\t\tif (e.target.value === '' || (/^\\d+$/.test(e.target.value) && e.target.value <= 100)) {\n\t\t\tlet val = e.target.value;\n\t\t\tif (/^0+\\d/.test(e.target.value)) {\n\t\t\t\tval = val.substr(1);\n\t\t\t}\n\t\t\tthis.setState({years: val.split(\" \").join(\"\")});\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<TypeSwitcher\n\t\t\t\t\tcurrentView = {this.state.currentView}\n\t\t\t\t\tchangeCurrentView = {this.handleCurrentViewChange}\n\t\t\t\t\t/>\n\t\t\t\t<Description \n\t\t\t\t\tcurrentView = {this.state.currentView}\n\t\t\t\t\t/>\n\t\t\t\t<InputValues\n\t\t\t\t\tcurrentView = {this.state.currentView}\n\t\t\t\t\tamount = {this.state.amount}\n\t\t\t\t\tpayment = {this.state.payment}\n\t\t\t\t\trate = {this.state.rate}\n\t\t\t\t\tyears = {this.state.years}\n\t\t\t\t\tchangeAmount = {this.handleAmountChange}\n\t\t\t\t\tchangePayment = {this.handlePaymentChange}\n\t\t\t\t\tchangeRate = {this.handleRateChange}\n\t\t\t\t\tchangeYears = {this.handleYearsChange}\n\t\t\t\t\t/>\n\t\t\t\t<Charts\n\t\t\t\t\tcurrentView = {this.state.currentView}\n\t\t\t\t\tamount = {this.state.amount}\n\t\t\t\t\tpayment = {this.state.payment}\n\t\t\t\t\trate = {this.state.rate}\n\t\t\t\t\tyears = {this.state.years}\n\t\t\t\t\t/>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('investment-loan-calculators-root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}